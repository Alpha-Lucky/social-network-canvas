{"version":3,"sources":["hoc/withAuthRedirect.js","components/pages/messages/Contact/contact.jsx","components/pages/messages/MessageInfo/propsMessage.jsx","components/pages/messages/message.jsx","components/pages/messages/messageContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","UserNickName","props","className","to","id","name","PropsMessage","alt","src","messageThisUser","maxLength15","maxLengthCreating","ReduxAddMessagesForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Messages","dialogMap","dialogData","map","el","messageMap","messageData","message","values","clickSubValueContainer","newMessageBody","compose","connect","messagesPage","dispatch","addMessageActionCreator","Component","RedirectComponent","this","React"],"mappings":"yNAIIA,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,KAAKD,S,kDCQRE,EARM,SAACC,GAClB,OACI,qBAAKC,UAAU,YAAf,SACI,+BAAM,cAAC,IAAD,CAASC,GAAI,aAAeF,EAAMG,GAAlC,SAAuCH,EAAMI,YCIhDC,EATM,SAACL,GAClB,OACI,sBAAKC,UAAU,SAAf,UACI,qBAAKK,IAAI,GAAGC,IAAI,+GAChB,+BAAOP,EAAMQ,sBCCnBC,G,OAAcC,YAAkB,KAsChCC,EAAuBC,YAAU,CAACC,KAAM,oBAAjBD,EAXL,SAACZ,GACrB,OAAQ,uBAAMc,SAAUd,EAAMe,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOZ,KAAK,iBAAiBa,UAAWC,IAAUjB,UAAU,mBAAmBkB,YAAY,cAAcC,SAAU,CAACC,IAAUZ,OAElI,8BACI,wBAAQR,UAAU,SAAlB,0BASLqB,EAxCE,SAACtB,GAEd,IAAIuB,EAAYvB,EAAMJ,MAAM4B,WAAWC,KAAI,SAAAC,GAAE,OAAI,cAAC,EAAD,CAA0BtB,KAAMsB,EAAGtB,KAAMD,GAAIuB,EAAGvB,IAA7BuB,EAAGvB,OACnEwB,EAAa3B,EAAMJ,MAAMgC,YAAYH,KAAI,SAAAC,GAAE,OAAI,cAAC,EAAD,CAA0BlB,gBAAiBkB,EAAGG,QAAS1B,GAAIuB,EAAGvB,IAA3CuB,EAAGvB,OAOzE,OACI,sBAAKF,UAAU,aAAf,UACI,qBAAKA,UAAU,UAAf,SACKsB,IAEL,sBAAKtB,UAAU,cAAf,UACK0B,EACF,qBAAK1B,UAAU,gBAAf,SACA,cAACU,EAAD,CAAsBG,SAbb,SAACgB,GACjB,OAAO9B,EAAM+B,uBAAuBD,EAAOE,4BCOpCC,sBACXC,aAjBY,SAACtC,GAEb,MAAO,CACHA,MAAOA,EAAMuC,iBAIF,SAACC,GAEhB,MAAO,CACHL,uBAAwB,SAACC,GACrBI,EAASC,YAAwBL,UJVb,SAACM,GAAe,IAGtCC,EAHqC,4JAIvC,WACI,OAAKC,KAAKxC,MAAMH,OACT,cAACyC,EAAD,eAAeE,KAAKxC,QADI,cAAC,IAAD,CAAUE,GAAI,eALV,GAGXuC,IAAMH,WAYtC,OAFqCJ,YAAQvC,EAARuC,CAAqCK,KIE/DN,CACyCX","file":"static/js/4.252f6d37.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n  })\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={\"/Login\"} />\r\n            return <Component {...this.props} />\r\n        }\r\n\r\n    }\r\n\r\n\r\n      \r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\n\r\nconst UserNickName = (props) => {\r\n    return (\r\n        <div className=\"propsName\">\r\n            <span><NavLink to={'/Messages/' + props.id}>{props.name}</NavLink></span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserNickName","import React from 'react';\r\n\r\n\r\nconst PropsMessage = (props) => {\r\n    return (\r\n        <div className=\"dialog\">\r\n            <img alt=\"\" src=\"https://img2.freepng.ru/20180516/kgw/kisspng-circle-spiral-point-5afc6640e7a081.7898340415264906889488.jpg\" />\r\n            <span>{props.messageThisUser}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PropsMessage","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport Textarea from '../../common/FormControls/FormControls';\r\nimport { maxLengthCreating, required } from '../../common/validation/validation';\r\nimport UserNickName from './Contact/contact';\r\nimport PropsMessage from './MessageInfo/propsMessage';\r\nimport './styleMass.css'\r\n\r\nconst maxLength15 = maxLengthCreating(15)\r\n\r\nconst Messages = (props) => {\r\n\r\n    let dialogMap = props.state.dialogData.map(el => <UserNickName key={el.id} name={el.name} id={el.id} />);\r\n    let messageMap = props.state.messageData.map(el => <PropsMessage key={el.id} messageThisUser={el.message} id={el.id} />);\r\n    \r\n    let addNewMessage = (values) => {\r\n        return props.clickSubValueContainer(values.newMessageBody)\r\n        }\r\n\r\n\r\n    return (\r\n        <div className=\"boxContact\"> \r\n            <div className=\"boxInfo\">\r\n                {dialogMap}\r\n            </div>\r\n            <div className=\"boxInfoCont\">\r\n                {messageMap}\r\n               <div className=\"boxNewMessage\"> \r\n               <ReduxAddMessagesForm onSubmit={addNewMessage} />\r\n               </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst AddMessagesForm = (props) => {\r\n    return  <form onSubmit={props.handleSubmit}>       \r\n                <div>\r\n                    <Field name=\"newMessageBody\" component={Textarea} className=\"textariaMessages\" placeholder=\"new message\" validate={[required, maxLength15]} />\r\n                </div>\r\n                <div>\r\n                    <button className=\"submit\"> Ok </button>\r\n                    </div>\r\n            </form> \r\n}\r\n\r\nconst ReduxAddMessagesForm = reduxForm({form: \"textariaMessages\"}) (AddMessagesForm)\r\n\r\n\r\n\r\nexport default Messages\r\n","\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../../hoc/withAuthRedirect';\r\nimport { addMessageActionCreator } from '../../../redux/messagesReducer';\r\nimport Messages from './message';\r\n\r\nlet stateData = (state) => {\r\n\r\n    return {\r\n        state: state.messagesPage\r\n    }\r\n}\r\n\r\nlet dispatchData = (dispatch) => {\r\n\r\n    return {\r\n        clickSubValueContainer: (newMessageBody) => {\r\n            dispatch(addMessageActionCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(stateData, dispatchData), withAuthRedirect)(Messages)   \r\n    "],"sourceRoot":""}