{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","status__profile_info","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","profile","handleSubmit","error","onSubmit","stylesForForm","formSummaryError","descriptionBlock__spanInfo","createField","Input","type","Textarea","Object","keys","contacts","map","key","contactTitle","contactValue","ProfileDescription","isOwner","goToEditMode","onClick","aboutMe","lookingForAJob","lookingForAJobDescription","Contacts","href","ProfileInfo","savePhoto","saveProfile","Preloader","container__profile__thisuser","profile__ava_and_name_and_status","mainPhoto","label__down","for","input__down","src","photos","large","id","target","files","length","userPhoto","alt","name__status","fullName","initialValues","formData","then","descriptionBlock","Post","item","message","span__heart","likesCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","Field","name","component","placeholder","validate","required","submit__profile__myposts","MyPosts","React","memo","postsElements","posts","reverse","p","postsBlock","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.b1831235.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container__profile__thisuser\":\"ProfileInfo_container__profile__thisuser__1jHov\",\"profile__ava_and_name_and_status\":\"ProfileInfo_profile__ava_and_name_and_status__3s9Rw\",\"mainPhoto\":\"ProfileInfo_mainPhoto__3xtcx\",\"name__status\":\"ProfileInfo_name__status__3kc0z\",\"status__profile_info\":\"ProfileInfo_status__profile_info__7zrQB\",\"input__down\":\"ProfileInfo_input__down__2q-DY\",\"label__down\":\"ProfileInfo_label__down__1Qvw5\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__xsXty\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3p7b8\",\"submit__profile__myposts\":\"MyPosts_submit__profile__myposts__RS2WZ\",\"posts\":\"MyPosts_posts__1e6Ll\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3YZoD\",\"span__heart\":\"Post_span__heart__2TYhZ\"};","import React, {useState, useEffect} from 'react';\nimport s from './ProfileInfo.module.css';\n\n\nconst ProfileStatusWithHooks = (props) => {\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    useEffect( () => {\n        setStatus(props.status);\n    }, [props.status] );\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    }\n\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value);\n    }\n\n    return (\n        <div>\n            { !editMode &&\n            <div>\n                <span className={s.status__profile_info} onDoubleClick={ activateEditMode }>{props.status || \"empty\"}</span>\n            </div>\n            }\n            {editMode &&\n            <div>\n                <input onChange={onStatusChange} autoFocus={true} onBlur={ deactivateEditMode }\n                       value={status} />\n            </div>\n            }\n        </div>\n    )\n}\n\n\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport { reduxForm } from 'redux-form';\r\nimport { createField, Input, Textarea } from '../../common/FormsControls/FormsControls';\r\nimport s from './ProfileInfo.module.css';\r\nimport stylesForForm from './../../common/FormsControls/FormsControls.module.css'\r\n\r\nconst ProfileDataForm = ({profile, handleSubmit, error }) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <button className=\"submit\">save</button>\r\n            {error && <div className={stylesForForm.formSummaryError}>{error}</div>}\r\n            <div>\r\n                <div>\r\n                    <span className={s.descriptionBlock__spanInfo}>Full name: {createField(\"Full name\", \"fullName\", [], Input)} </span>\r\n                </div>\r\n                <div>\r\n                    <span className={s.descriptionBlock__spanInfo}>About me: {createField(\"About me\", \"aboutMe\", [], Input)} </span>\r\n                </div>\r\n                <div>\r\n                    <span className={s.descriptionBlock__spanInfo}>Looking for a job: {createField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})} </span>\r\n                </div>\r\n                    <div>\r\n                        <span className={s.descriptionBlock__spanInfo}>My professional skills: {createField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)} </span>\r\n                    </div>\r\n                <div>\r\n                    <span className={s.descriptionBlock__spanInfo}> Contacts <hr/> {Object.keys(profile.contacts).map(key => {\r\n                        return <span className={s.descriptionBlock__spanInfo} key={key} contactTitle={key} contactValue={profile.contacts[key]}>\r\n                            {key} : {createField(key, \"contacts.\" + key, [], Input )}\r\n                            </span>\r\n                    })} </span>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm)\r\nexport default ProfileDataFormReduxForm;\r\n\r\n","import React, { useState } from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport ProfileDataForm from './ProfileDataForm';\r\n\r\nconst ProfileInfo = ({ profile, status, updateStatus, isOwner, savePhoto, saveProfile }) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit =  (formData) => {\r\n        saveProfile(formData).then(\r\n        ()=> {\r\n            setEditMode(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className={s.container__profile__thisuser + \" \" + \"border__topAndBot\"}>\r\n            <div className={s.profile__ava_and_name_and_status}>\r\n                <div className={s.mainPhoto}>\r\n                    {isOwner \r\n                    ? <label className={s.label__down} for=\"test\">\r\n                            <div className={s.input__down}>\r\n                                <img src={profile.photos.large} />\r\n                            </div>\r\n                                <input type={\"file\"} id=\"test\" onChange={onMainPhotoSelected} />\r\n                        </label> \r\n                    : <img src={profile.photos.large || userPhoto} alt=\"\" /> }\r\n                </div>\r\n\r\n                <div className={s.name__status}>\r\n                    <span>{profile.fullName} </span>\r\n                    <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n                </div>\r\n\r\n            </div>\r\n             {editMode \r\n            ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} /> \r\n            :   <div className={s.descriptionBlock}>\r\n                <ProfileDescription profile={profile} isOwner={isOwner} goToEditMode={() => {setEditMode(true)}} />\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileDescription = ({ profile, isOwner, goToEditMode }) => {\r\n    return (\r\n        <div>\r\n           { isOwner && <button className=\"submit\" onClick={goToEditMode} >edit</button>}\r\n            <div>\r\n                <div>\r\n                    <span className={s.descriptionBlock__spanInfo}>\r\n                        <b>About me:</b> \r\n                        <span>{profile.aboutMe || <b>&#8943;</b> }\r\n                        </span>\r\n                        </span>\r\n                </div>\r\n                <div>\r\n                    <span className={s.descriptionBlock__spanInfo}>\r\n                        <b>Looking for a job:</b> \r\n                        <span>{profile.lookingForAJob ? \"yes\" : \"no\"}</span>\r\n                    </span>\r\n                </div>\r\n                {profile.lookingForAJob &&\r\n                    <div>\r\n                        <span className={s.descriptionBlock__spanInfo}>\r\n                        <b>My professionak skills:</b> \r\n                        <span>{profile.lookingForAJobDescription}</span>\r\n                        </span>\r\n                    </div>\r\n                }\r\n                <div>\r\n                    <span className={s.descriptionBlock__spanInfo}><b>Contacts</b> <hr/> {Object.keys(profile.contacts).map(key => {\r\n                        return <Contacts key={key} contactTitle={key} contactValue={profile.contacts[key]} />\r\n                    })} </span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst Contacts = ({ contactTitle, contactValue }) => {\r\n    return <div>\r\n        <span>\r\n            <b>{contactTitle}:</b>\r\n             <span>\r\n                 <a className=\"linkContent\" href={contactValue}>{contactValue}</a>\r\n            </span>\r\n        </span>\r\n        </div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={s.item + \" \" + \"border__topAndBot\"}>\r\n      <div>\r\n        <span>\r\n          {props.message}\r\n        </span>\r\n      </div>\r\n      <div>\r\n        <span className={s.span__heart}>&#10084;</span>\r\n        {props.likesCount}\r\n      </div>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nlet AddNewPostForm = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field name=\"newPostText\" component={Textarea} placeholder={\"Post message\"}\r\n                   validate={[required, maxLength10]} />\r\n        </div>\r\n        <div className={s.submit__profile__myposts}>\r\n            <button className=\"submit\">Add post</button>\r\n        </div>\r\n    </form>;\r\n}\r\n\r\nlet AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm);\r\n\r\nconst MyPosts = React.memo(props => {\r\n    let postsElements =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map(p => <Post  key={p.id} message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    let newPostElement = React.createRef();\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                         isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         saveProfile={props.saveProfile}\r\n                         updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\nimport {withRouter} from \"react-router-dom\";\nimport {compose} from \"redux\";\n\nclass ProfileContainer extends React.Component {\n\n    refreshProfile() {\n        let userId = this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if (!userId) {\n                this.props.history.push(\"/login\");\n            }\n        }\n        this.props.getUserProfile(userId);\n        this.props.getStatus(userId);\n    }\n\n    componentDidMount() {\n\n        this.refreshProfile();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.match.params.userId != prevProps.match.params.userId ) {\n            this.refreshProfile();\n        }\n    }\n\n    render() {\n\n       // console.log(\"RENDER PROFILE\");\n        return (\n            <Profile {...this.props}\n                    isOwner={!this.props.match.params.userId}\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus}\n                     savePhoto={this.props.savePhoto}/>\n        )\n    }\n}\n\nlet mapStateToProps = (state) => {\n    //console.log('mapStateToProps PROFILE')\n    return ({\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        authorizedUserId: state.auth.userId,\n        isAuth: state.auth.isAuth\n    })\n}\n\nexport default compose(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\n    withRouter\n)(ProfileContainer);\n\n\n\n\n"],"sourceRoot":""}